<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>server</name></assembly>
<members>
<member name="M:utilities.aes.Encrypt(System.String,System.String,System.String)">
 <summary>
 Encrypt content.
 </summary>
 <param name="iv">IV.</param>
 <param name="key">Key.</param>
 <param name="content">Content.</param>
</member>
<member name="M:utilities.aes.Decrypt(System.String,System.String,System.String)">
 <summary>
 Decrypt.
 </summary>
 <param name="iv">IV.</param>
 <param name="key">Key.</param>
 <param name="content">Content.</param>
</member>
<member name="T:utilities.aes">
 <summary>
 AES encryptor of MochaDB.
 </summary>
</member>
<member name="M:utilities.cli.printnc(System.String,System.ConsoleColor)">
 <summary>
 Print message and new line to screen with color.
 </summary>
 <param name="msg">Message.</param>
 <param name="color">Color of message.</param>
</member>
<member name="M:utilities.cli.printc(System.String,System.ConsoleColor)">
 <summary>
 Print message to screen with color.
 </summary>
 <param name="msg">Message.</param>
 <param name="color">Color of message.</param>
</member>
<member name="M:utilities.cli.printTable(MochaDB.Mhql.MochaTableResult)">
 <summary>
 Print MochaTableResult.
 </summary>
 <param name="table">MochaTableResult to print.</param>
</member>
<member name="M:utilities.cli.printTable(MochaDB.MochaTable)">
 <summary>
 Print MochaTable.
 </summary>
 <param name="table">MochaTable to print.</param>
</member>
<member name="M:utilities.cli.printError(System.String)">
 <summary>
 Print error message.
 </summary>
 <param name="msg">Message.</param>
</member>
<member name="M:utilities.cli.printEnumerable(System.Collections.IEnumerable)">
 <summary>
 Print elements of IEnumerable.
 </summary>
 <param name="enumrable">IEnumerable to print.</param>
</member>
<member name="M:utilities.cli.printDictAsTable(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Print dictionary as table.
 </summary>
 <param name="dict">Dictionary to print.<param>
</member>
<member name="M:utilities.cli.exitError(System.String)">
 <summary>
 Exit with error message.
 </summary>
 <param name="msg">Message.</param>
</member>
<member name="T:utilities.cli">
 <summary>
 CLI(Command Line Interface) utilities.
 </summary>
</member>
<member name="M:utilities.commandProcessor.splitNamespace(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Get namespace of command if exists.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Module name(namespace).</returns>
</member>
<member name="M:utilities.commandProcessor.removeNamespace(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Remove namespace from command.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Command without namespace.</returns>
</member>
<member name="M:utilities.commandProcessor.removeArguments(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Remove arguments from command.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Command without arguments.</returns>
</member>
<member name="M:utilities.commandProcessor.getArguments(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Returns arguments of command.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Arguments.</returns>
</member>
<member name="T:utilities.commandProcessor">
 <summary>
 Command processor for commands.
 </summary>
</member>
<member name="F:server.server.version@">
 <summary>
 Version of terminal.
 </summary>
</member>
<member name="F:server.server.pwd@">
 <summary>
 Working directory.
 </summary>
</member>
<member name="P:server.server.pwd(System.String)">
 <summary>
 Working directory.
 </summary>
</member>
<member name="P:server.server.version">
 <summary>
 Version of terminal.
 </summary>
</member>
<member name="P:server.server.pwd">
 <summary>
 Working directory.
 </summary>
</member>
<member name="M:server.server.getInput">
 <summary>
 Returns input with pwd.
 </summary>
 <returns>Input.</returns>
</member>
<member name="M:server.server.getInput(System.String,System.ConsoleColor)">
 <summary>
 Returns input with msg and color.
 </summary>
 <param name="msg">Message.</param>
 <param name="color">Color of message.</param>
 <returns>Input.</returns>
</member>
<member name="M:server.server.getInput(System.String)">
 <summary>
 Returns input with msg.
 </summary>
 <param name="msg">Message.</param>
 <returns>Input.</returns>
</member>
<member name="T:server.server">
 <summary>
 Server declare.
 </summary>
</member>
<member name="F:server.configs.connections@">
 <summary>
 Connected databases of server connection.
 </summary>
</member>
<member name="F:server.configs.key@">
 <summary>
 Protection password of server connection.
 </summary>
</member>
<member name="F:server.configs.lock@">
 <summary>
 Lock server connection with password.
 </summary>
</member>
<member name="F:server.configs.listen@">
 <summary>
 The maximum length of the pending connections queue.
 </summary>
</member>
<member name="F:server.configs.port@">
 <summary>
 Port.
 </summary>
</member>
<member name="F:server.configs.address@">
 <summary>
 IP address.
 </summary>
</member>
<member name="F:server.configs.name@">
 <summary>
 Name of server.
 </summary>
</member>
<member name="P:server.configs.port(System.Int32)">
 <summary>
 Port.
 </summary>
</member>
<member name="P:server.configs.name(System.String)">
 <summary>
 Name of server.
 </summary>
</member>
<member name="P:server.configs.lock(System.Boolean)">
 <summary>
 Lock server connection with password.
 </summary>
</member>
<member name="P:server.configs.listen(System.Int32)">
 <summary>
 The maximum length of the pending connections queue.
 </summary>
</member>
<member name="P:server.configs.key(System.String)">
 <summary>
 Protection password of server connection.
 </summary>
</member>
<member name="P:server.configs.connections(System.Collections.Generic.List{MochaDB.MochaDatabase})">
 <summary>
 Connected databases of server connection.
 </summary>
</member>
<member name="P:server.configs.address(System.String)">
 <summary>
 IP address.
 </summary>
</member>
<member name="P:server.configs.port">
 <summary>
 Port.
 </summary>
</member>
<member name="P:server.configs.name">
 <summary>
 Name of server.
 </summary>
</member>
<member name="P:server.configs.lock">
 <summary>
 Lock server connection with password.
 </summary>
</member>
<member name="P:server.configs.listen">
 <summary>
 The maximum length of the pending connections queue.
 </summary>
</member>
<member name="P:server.configs.key">
 <summary>
 Protection password of server connection.
 </summary>
</member>
<member name="P:server.configs.connections">
 <summary>
 Connected databases of server connection.
 </summary>
</member>
<member name="P:server.configs.address">
 <summary>
 IP address.
 </summary>
</member>
<member name="T:server.configs">
 <summary>
 Config settings.
 </summary>
</member>
<member name="M:modules.clear.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.clear">
 <summary>
 Clear terminal screen.
 </summary>
</member>
<member name="M:modules.eng.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.eng">
 <summary>
 Show version of engine.
 </summary>
</member>
<member name="M:modules.exit.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.exit">
 <summary>
 Exit from terminal.
 </summary>
</member>
<member name="M:modules.ver.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.ver">
 <summary>
 Show version.
 </summary>
</member>
<member name="F:config.tokens.DOLLAREQUAL@">
 <summary>
 Dollar equal.
 </summary>
</member>
<member name="F:config.tokens.DOLLAR@">
 <summary>
 Dollar mark.
 </summary>
</member>
<member name="F:config.tokens.COLONEQUAL@">
 <summary>
 Colon equal.
 </summary>
</member>
<member name="F:config.tokens.EXCLAMATION@">
 <summary>
 Exclamation.
 </summary>
</member>
<member name="F:config.tokens.ELLIPSIS@">
 <summary>
 Ellipsis.
 </summary>
</member>
<member name="F:config.tokens.RARROW@">
 <summary>
 Right arrow.
 </summary>
</member>
<member name="F:config.tokens.LARROW@">
 <summary>
 Left arrow.
 </summary>
</member>
<member name="F:config.tokens.ATEQUAL@">
 <summary>
 At equal.
 </summary>
</member>
<member name="F:config.tokens.AT@">
 <summary>
 At.
 </summary>
</member>
<member name="F:config.tokens.DOUBLESLASHEQUAL@">
 <summary>
 Double slahs equal.
 </summary>
</member>
<member name="F:config.tokens.DOUBLESTAREQUAL@">
 <summary>
 Double start equal.
 </summary>
</member>
<member name="F:config.tokens.RIGHTSHIFTEQUAL@">
 <summary>
 Right shift equal.
 </summary>
</member>
<member name="F:config.tokens.LEFTSHIFTEQUAL@">
 <summary>
 Left shift equal
 </summary>
</member>
<member name="F:config.tokens.CIRCUMFLEXEQUAL@">
 <summary>
 Circumflex equal.
 </summary>
</member>
<member name="F:config.tokens.VBAREQUAL@">
 <summary>
 Vertical Bar equal.
 </summary>
</member>
<member name="F:config.tokens.AMPEREQUAL@">
 <summary>
 Amper equal.
 </summary>
</member>
<member name="F:config.tokens.PERCENTEQUAL@">
 <summary>
 Percent equal.
 </summary>
</member>
<member name="F:config.tokens.SLASHEQUAL@">
 <summary>
 Slash equal.
 </summary>
</member>
<member name="F:config.tokens.MINEQUAL@">
 <summary>
 Minus equal.
 </summary>
</member>
<member name="F:config.tokens.PLUSEQUAL@">
 <summary>
 Plus equal.
 </summary>
</member>
<member name="F:config.tokens.DOUBLESTAR@">
 <summary>
 Double star.
 </summary>
</member>
<member name="F:config.tokens.RIGHTSHIFT@">
 <summary>
 Right shift.
 </summary>
</member>
<member name="F:config.tokens.LEFTSHIFT@">
 <summary>
 Left shift.
 </summary>
</member>
<member name="F:config.tokens.CIRCUMFLEX@">
 <summary>
 Circumflex.
 </summary>
</member>
<member name="F:config.tokens.TILDE@">
 <summary>
 Tilde.
 </summary>
</member>
<member name="F:config.tokens.GREATEREQUAL@">
 <summary>
 Greater or equals.
 </summary>
</member>
<member name="F:config.tokens.LESSEQUAL@">
 <summary>
 Less or equals.
 </summary>
</member>
<member name="F:config.tokens.NOTEQUAL@">
 <summary>
 Not equals to.
 </summary>
</member>
<member name="F:config.tokens.EQEQUAL@">
 <summary>
 Equals to.
 </summary>
</member>
<member name="F:config.tokens.RBRACE@">
 <summary>
 Right bracket.
 </summary>
</member>
<member name="F:config.tokens.LBRACE@">
 <summary>
 Left bracket.
 </summary>
</member>
<member name="F:config.tokens.PERCENT@">
 <summary>
 Percent.
 </summary>
</member>
<member name="F:config.tokens.DOT@">
 <summary>
 Dot.
 </summary>
</member>
<member name="F:config.tokens.EQUAL@">
 <summary>
 Equal.
 </summary>
</member>
<member name="F:config.tokens.GREATER@">
 <summary>
 Greater than.
 </summary>
</member>
<member name="F:config.tokens.LESS@">
 <summary>
 Less than.
 </summary>
</member>
<member name="F:config.tokens.AMPER@">
 <summary>
 Amper.
 </summary>
</member>
<member name="F:config.tokens.VBAR@">
 <summary>
 Vertical Bar.
 </summary>
</member>
<member name="F:config.tokens.SLASH@">
 <summary>
 Slash.
 </summary>
</member>
<member name="F:config.tokens.STAR@">
 <summary>
 Start.
 </summary>
</member>
<member name="F:config.tokens.MINUS@">
 <summary>
 Minus.
 </summary>
</member>
<member name="F:config.tokens.PLUS@">
 <summary>
 Plus.
 </summary>
</member>
<member name="F:config.tokens.SEMICOLON@">
 <summary>
 Semicolon.
 </summary>
</member>
<member name="F:config.tokens.COMMA@">
 <summary>
 Comma.
 </summary>
</member>
<member name="F:config.tokens.COLON@">
 <summary>
 Colon.
 </summary>
</member>
<member name="F:config.tokens.RPAR@">
 <summary>
 Right parantheses.
 </summary>
</member>
<member name="F:config.tokens.LPAR@">
 <summary>
 Left parentheses.
 </summary>
</member>
<member name="F:config.tokens.ESCAPESEQUENCE@">
 <summary>
 Escape sequence character of values.
 </summary>
</member>
<member name="F:config.tokens.INLINECOMMENT@">
 <summary>
 Inline comment.
 </summary>
</member>
<member name="P:config.tokens.VBAREQUAL">
 <summary>
 Vertical Bar equal.
 </summary>
</member>
<member name="P:config.tokens.VBAR">
 <summary>
 Vertical Bar.
 </summary>
</member>
<member name="P:config.tokens.TILDE">
 <summary>
 Tilde.
 </summary>
</member>
<member name="P:config.tokens.STAR">
 <summary>
 Start.
 </summary>
</member>
<member name="P:config.tokens.SLASHEQUAL">
 <summary>
 Slash equal.
 </summary>
</member>
<member name="P:config.tokens.SLASH">
 <summary>
 Slash.
 </summary>
</member>
<member name="P:config.tokens.SEMICOLON">
 <summary>
 Semicolon.
 </summary>
</member>
<member name="P:config.tokens.RPAR">
 <summary>
 Right parantheses.
 </summary>
</member>
<member name="P:config.tokens.RIGHTSHIFTEQUAL">
 <summary>
 Right shift equal.
 </summary>
</member>
<member name="P:config.tokens.RIGHTSHIFT">
 <summary>
 Right shift.
 </summary>
</member>
<member name="P:config.tokens.RBRACE">
 <summary>
 Right bracket.
 </summary>
</member>
<member name="P:config.tokens.RARROW">
 <summary>
 Right arrow.
 </summary>
</member>
<member name="P:config.tokens.PLUSEQUAL">
 <summary>
 Plus equal.
 </summary>
</member>
<member name="P:config.tokens.PLUS">
 <summary>
 Plus.
 </summary>
</member>
<member name="P:config.tokens.PERCENTEQUAL">
 <summary>
 Percent equal.
 </summary>
</member>
<member name="P:config.tokens.PERCENT">
 <summary>
 Percent.
 </summary>
</member>
<member name="P:config.tokens.NOTEQUAL">
 <summary>
 Not equals to.
 </summary>
</member>
<member name="P:config.tokens.MINUS">
 <summary>
 Minus.
 </summary>
</member>
<member name="P:config.tokens.MINEQUAL">
 <summary>
 Minus equal.
 </summary>
</member>
<member name="P:config.tokens.LPAR">
 <summary>
 Left parentheses.
 </summary>
</member>
<member name="P:config.tokens.LESSEQUAL">
 <summary>
 Less or equals.
 </summary>
</member>
<member name="P:config.tokens.LESS">
 <summary>
 Less than.
 </summary>
</member>
<member name="P:config.tokens.LEFTSHIFTEQUAL">
 <summary>
 Left shift equal
 </summary>
</member>
<member name="P:config.tokens.LEFTSHIFT">
 <summary>
 Left shift.
 </summary>
</member>
<member name="P:config.tokens.LBRACE">
 <summary>
 Left bracket.
 </summary>
</member>
<member name="P:config.tokens.LARROW">
 <summary>
 Left arrow.
 </summary>
</member>
<member name="P:config.tokens.INLINECOMMENT">
 <summary>
 Inline comment.
 </summary>
</member>
<member name="P:config.tokens.GREATEREQUAL">
 <summary>
 Greater or equals.
 </summary>
</member>
<member name="P:config.tokens.GREATER">
 <summary>
 Greater than.
 </summary>
</member>
<member name="P:config.tokens.EXCLAMATION">
 <summary>
 Exclamation.
 </summary>
</member>
<member name="P:config.tokens.ESCAPESEQUENCE">
 <summary>
 Escape sequence character of values.
 </summary>
</member>
<member name="P:config.tokens.EQUAL">
 <summary>
 Equal.
 </summary>
</member>
<member name="P:config.tokens.EQEQUAL">
 <summary>
 Equals to.
 </summary>
</member>
<member name="P:config.tokens.ELLIPSIS">
 <summary>
 Ellipsis.
 </summary>
</member>
<member name="P:config.tokens.DOUBLESTAREQUAL">
 <summary>
 Double start equal.
 </summary>
</member>
<member name="P:config.tokens.DOUBLESTAR">
 <summary>
 Double star.
 </summary>
</member>
<member name="P:config.tokens.DOUBLESLASHEQUAL">
 <summary>
 Double slahs equal.
 </summary>
</member>
<member name="P:config.tokens.DOT">
 <summary>
 Dot.
 </summary>
</member>
<member name="P:config.tokens.DOLLAREQUAL">
 <summary>
 Dollar equal.
 </summary>
</member>
<member name="P:config.tokens.DOLLAR">
 <summary>
 Dollar mark.
 </summary>
</member>
<member name="P:config.tokens.COMMA">
 <summary>
 Comma.
 </summary>
</member>
<member name="P:config.tokens.COLONEQUAL">
 <summary>
 Colon equal.
 </summary>
</member>
<member name="P:config.tokens.COLON">
 <summary>
 Colon.
 </summary>
</member>
<member name="P:config.tokens.CIRCUMFLEXEQUAL">
 <summary>
 Circumflex equal.
 </summary>
</member>
<member name="P:config.tokens.CIRCUMFLEX">
 <summary>
 Circumflex.
 </summary>
</member>
<member name="P:config.tokens.ATEQUAL">
 <summary>
 At equal.
 </summary>
</member>
<member name="P:config.tokens.AT">
 <summary>
 At.
 </summary>
</member>
<member name="P:config.tokens.AMPEREQUAL">
 <summary>
 Amper equal.
 </summary>
</member>
<member name="P:config.tokens.AMPER">
 <summary>
 Amper.
 </summary>
</member>
<member name="T:config.tokens">
 <summary>
 Tokens.
 </summary>
</member>
<member name="M:config.lexer.split(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Split statement to key-value format.
 </summary>
 <param name="statement">Statement to split.</param>
 <returns>Splitted parts if success, null if not.</returns>
</member>
<member name="M:config.lexer.removeComments(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Remove comments from statement.
 </summary>
 <param name="statement">Statement.</param>
</member>
<member name="M:config.lexer.isStringKey(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Key type is string?
 </summary>
 <param name="name">Name of key.</param>
 <returns>true is type of key is string, false if not.</returns>
</member>
<member name="M:config.lexer.isSkipableLine(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 This statement is skipable statement?
 </summary>
 <param name="statement">Statement to check.</param>
 <returns>true if statement is skipable statement, false if not.</returns>
</member>
<member name="M:config.lexer.isKeyStatement(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 This statement is key statement?
 </summary>
 <param name="statement">Statement to check.</param>
 <returns>true if statement is key statement, false if not.</returns>
</member>
<member name="M:config.lexer.isKey(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 This key a valid key?
 </summary>
 <param name="name">Name of key.</param>
 <returns>true if key is valid, false if not.</returns>
</member>
<member name="M:config.lexer.isIntegerKey(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Key type is integer?
 </summary>
 <param name="name">Name of key.</param>
 <returns>true is type of key is integer, false if not.</returns>
</member>
<member name="M:config.lexer.isDatabaseStatement(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 This statement is database statement?
 </summary>
 <param name="statement">Statement to check.</param>
 <returns>true if statement is database statement, false if not.</returns>
</member>
<member name="M:config.lexer.isCommentLine(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 This statement is comment line?
 </summary>
 <param name="statement">Statement to check.</param>
 <returns>true if statement is comment line, false if not.</returns>
</member>
<member name="M:config.lexer.isBooleanValue(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Type is boolean value?
 </summary>
 <param name="value">Value to check.</param>
 <returns>true if value is boolean value, false if not.</returns>
</member>
<member name="M:config.lexer.isBooleanKey(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Type is boolean key?
 </summary>
 <param name="name">Name of key.</param>
 <returns>true is type of boolean is string, false if not.</returns>
</member>
<member name="M:config.lexer.getBraceRange(Microsoft.FSharp.Core.FSharpRef{System.String},Microsoft.FSharp.Core.FSharpRef{System.Char},Microsoft.FSharp.Core.FSharpRef{System.Char})">
 <summary>
 Decompose bracket range.
 </summary>
 <param name="statement">Statement.</param>
 <param name="openBrace">Open bracket.</param>
 <param name="closeBrace">Close bracket.</param>
 <returns>Range of brackets.</returns>
</member>
<member name="M:config.lexer.checkKeyValue(Microsoft.FSharp.Core.FSharpRef{System.String},Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Check key is valid value.
 </summary>
 <param name="name">Name of key.</param>
 <param name="value">Value of key.</param>
 <returns>true is valid, false if not.</returns>
</member>
<member name="T:config.lexer">
 <summary>
 Lexer of config system.
 </summary>
</member>
<member name="F:config.key.value">
 <summary>
 Value of key.
 <summary>
</member>
<member name="F:config.key.name">
 <summary>
 Name of key.
 </summary>
</member>
<member name="M:config.key.#ctor(System.String,System.String)">
 <summary>
 Create a new instance of <see cref="key"/>.
 </summary>
 <param name="name">Name of key.</param>
 <param name="value">Value of key.</param>
</member>
<member name="M:config.key.#ctor(System.String)">
 <summary>
 Create a new instance of <see cref="key"/>.
 </summary>
 <param name="name">Name of key.</param>
</member>
<member name="T:config.key">
 <summary>
 A key instance.
 </summary>
</member>
<member name="F:config.database.connection">
 <summary>
 Connection of connection.
 <summary>
</member>
<member name="F:config.database.name">
 <summary>
 Name of database.
 </summary>
</member>
<member name="M:config.database.#ctor(System.String,MochaDB.MochaDatabase)">
 <summary>
 Create a new instance of <see cref="database"/>.
 </summary>
 <param name="name">Name of database.</param>
 <param name="value">Connection of database.</param>
</member>
<member name="T:config.database">
 <summary>
 A database instance.
 </summary>
</member>
<member name="F:config.parser.context@">
 <summary>
 Config text.
 </summary>
</member>
<member name="P:config.parser.context(System.String[])">
 <summary>
 Config text.
 </summary>
</member>
<member name="M:config.parser.processValue(Microsoft.FSharp.Core.FSharpRef{System.String},Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Process valeu with tags.
 </summary>
 <param name="name">Name of key.</param>
 <param name="value">Value of key.</param>
 <returns>Value.</returns>
</member>
<member name="M:config.parser.processKey(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Process key.
 </summary>
 <param name="statement">Statement to process.</param>
 <returns>key instance.</returns>
</member>
<member name="M:config.parser.processBooleanValue(Microsoft.FSharp.Core.FSharpRef{System.String})">
 <summary>
 Process value as boolean.
 </summary>
 <param name="value">Value to process.</param>
 <returns>Boolean value.</returns>
</member>
<member name="P:config.parser.context">
 <summary>
 Config text.
 </summary>
</member>
<member name="M:config.parser.getKeys">
 <summary>
 Decompose and returns keys of config.
 </summary>
 <returns>Keys of config.</returns>
</member>
<member name="M:config.parser.getKey(System.String)">
 <summary>
 Get key by name.
 </summary>
 <param name="name">Name of key.</param>
 <returns>key instance if found, empty key instance if not.</returns>
</member>
<member name="M:config.parser.getDatabases">
 <summary>
 Decompose and returns database connections of config.
 </summary>
 <returns>Database connections of config.</returns>
</member>
<member name="M:config.parser.getDatabase(System.String)">
 <summary>
 Get database by name.
 </summary>
 <param name="name">Name of database.</param>
 <returns>database instance if found, empty database instance if not.</returns>
</member>
<member name="M:config.parser.checkKeys(Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{config.key}})">
 <summary>
 Check keys.
 </summary>
 <param name="keys">Keys to check.</param>
 <returns>true is success, false if not.</returns>
</member>
<member name="T:config.parser">
 <summary>
 Config parser.
 </summary>
</member>
<member name="M:Program.main(System.String[])">
 <summary>
 Entry point of terminal.
 </summary>
 <param name="argv">Arguments.</param>
 <returns>Exit code.</returns>
</member>
<member name="M:Program.processCommand(System.String,System.String)">
 <summary>
 Process command and do task.
 </summary>
 <param name="ns">Name of modules(namespace).</param>
 <param name="cmd">Commands(without module name).</param>
</member>
<member name="M:Program.showHelp">
 <summary>
 Show help.
 </summary>
</member>
<member name="M:Program.ready">
 <summary>
 Ready to use.
 </summary>
</member>
<member name="M:Program.check">
 <summary>
 Check dependicies.
 </summary>
</member>
</members>
</doc>
